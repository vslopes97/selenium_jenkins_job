{
  "_from": "n",
  "_id": "n@5.0.2",
  "_inBundle": false,
  "_integrity": "sha512-MiD3O7W7dSbOIZUPsRmI9lKNjSpM4Gr1d0CWCXC+DOCRVdfsODysYWOwSRq5gSP3Aqh74XBeHhHdwXHwF8510w==",
  "_location": "/n",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "n",
    "fetchSpec": "latest",
    "name": "n",
    "raw": "n",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/n/-/n-5.0.2.tgz",
  "_shasum": "6c0dca8f03034b3cf76dbb1c9335030019be0087",
  "_spec": "n",
  "_where": "/home/indtusuario/Documents/Selenium/angularjs-realworld-example-app-master",
  "author": {
    "email": "tj@vision-media.ca",
    "name": "TJ Holowaychuk"
  },
  "bin": {
    "n": "./bin/n"
  },
  "bugs": {
    "url": "https://github.com/tj/n/issues"
  },
  "bundleDependencies": false,
  "contributors": [
    {
      "email": "me@traviswebb.com",
      "name": "Travis Webb",
      "url": "tjw.io"
    },
    {
      "email": "me@nimit.io",
      "name": "Nimit Kalra",
      "url": "http://nimit.io"
    },
    {
      "email": "troy0820@gmail.com",
      "name": "Troy Connor",
      "url": "https://github.com/troy0820"
    }
  ],
  "dependencies": {},
  "deprecated": false,
  "description": "Interactively Manage All Your Node Versions",
  "devDependencies": {
    "bats": "^1.1.0"
  },
  "engines": {
    "node": "*"
  },
  "files": [
    "bin/n"
  ],
  "homepage": "https://github.com/tj/n",
  "keywords": [
    "nvm",
    "node",
    "version",
    "manager",
    "switcher",
    "node",
    "binary",
    "env"
  ],
  "license": "MIT",
  "name": "n",
  "optionalDependencies": {},
  "os": [
    "!win32"
  ],
  "preferGlobal": true,
  "readme": "# `n` – Interactively Manage Your Node.js Versions\n\n[![npm](https://img.shields.io/npm/dt/n.svg?style=flat-square)](https://www.npmjs.com/package/n)\n[![npm](https://img.shields.io/npm/dm/n.svg?style=flat-square)](https://www.npmjs.com/package/n)\n[![npm](https://img.shields.io/npm/v/n.svg?style=flat-square)](https://www.npmjs.com/package/n)\n[![npm](https://img.shields.io/npm/l/n.svg?style=flat-square)](https://www.npmjs.com/package/n)\n\nNode.js version management: no subshells, no profile setup, no convoluted API, just **simple**.\n\n![usage animation](http://nimit.io/images/n/n.gif)\n\n(Note: `n` is not supported natively on Windows.)\n\n- [`n` – Interactively Manage Your Node.js Versions](#n-%E2%80%93-Interactively-Manage-Your-Nodejs-Versions)\n    - [Installation](#Installation)\n        - [Third Party Installers](#Third-Party-Installers)\n    - [Installing/Activating Node Versions](#InstallingActivating-Node-Versions)\n    - [Removing Versions](#Removing-Versions)\n    - [Binary Usage](#Binary-Usage)\n    - [Help](#Help)\n    - [Custom Source](#Custom-Source)\n    - [Custom Architecture](#Custom-Architecture)\n    - [Optional Environment Variables](#Optional-Environment-Variables)\n\n## Installation\n\nSince you probably already have `node`, the easiest way to install `n` is through `npm`:\n\n    npm install -g n\n\nAlternatively, you can clone this repo and\n\n    make install\n\nto install `n` to `bin/n` of the directory specified in the environment variable `$PREFIX`, which defaults to `/usr/local` (note that you will likely need to use `sudo`). To install `n` in a custom location (such as `$CUSTOM_LOCATION/bin/n`), run `PREFIX=$CUSTOM_LOCATION make install`.\n\nOnce installed, `n` caches `node` versions in subdirectory `n/versions` of the directory specified in environment variable `N_PREFIX`, which defaults to `/usr/local`; and the _active_ `node` version is installed directly in `N_PREFIX`.\n\nTo avoid requiring `sudo` for `n` and `npm` global installs, it is recommended you either install to your home directory using `N_PREFIX`, or take ownership of the system directories:\n\n```bash\n# make cache folder (if missing) and take ownership\nsudo mkdir -p /usr/local/n\nsudo chown -R $(whoami) /usr/local/n\n# take ownership of node install destination folders\nsudo chown -R $(whoami) /usr/local/bin /usr/local/lib /usr/local/include /usr/local/share\n```\n\n### Third Party Installers\n\nOn macOS with [Homebrew](https://brew.sh/) you can install the [n formula](https://github.com/Homebrew/homebrew-core/blob/master/Formula/n.rb).\n\n    brew install n\n\nOn Linux and macOS, [n-install](https://github.com/mklement0/n-install) allows installation directly from GitHub; for instance:\n\n    curl -L https://git.io/n-install | bash\n\nn-install sets both `PREFIX` and `N_PREFIX` to `$HOME/n`, installs `n` to `$HOME/n/bin`, modifies the initialization files of supported shells to export `N_PREFIX` and add `$HOME/n/bin` to the `PATH`, and installs the latest LTS `node` version.\n\nAs a result, both `n` itself and all `node` versions it manages are hosted inside a single, optionally configurable directory, which you can later remove with the included `n-uninstall` script. `n-update` updates `n` itself to the latest version. See the [n-install repo](https://github.com/mklement0/n-install) for more details.\n\n## Installing/Activating Node Versions\n\nSimply execute `n <version>` to install a version of `node`. If `<version>` has already been installed (via `n`), `n` will activate that version.\nA leading `v` is optional, and a partial version number installs the newest matching version.\n\n    n 4.9.1\n    n 10\n    n v8.11.3\n\nExecute `n` on its own to view your currently installed versions. Use the up and down arrow keys to navigate and press enter to select. Use `q` or ^C (control + C) to exit the selection screen.\nIf you like vim key bindings during the selection of node versions, you can use `j` and `k` to navigate up or down without using arrows.\n\n    $ n\n\n      node/4.9.1\n    ο node/8.11.3\n      node/10.15.0\n\nUse or install the latest official release:\n\n    n latest\n\nUse or install the latest LTS official release:\n\n    n lts\n\n(If the active node version does not change after install, try opening a new shell in case seeing a stale version.)\n\n## Removing Versions\n\nRemove some cached versions:\n\n    n rm 0.9.4 v0.10.0\n\nRemoving all cached versions except the current version:\n\n    n prune\n\nRemove the installed node and npm (does not affect the cached version). This can be useful\nto revert to the system version of node (if in a different location), or if you no longer\nwish to use node and npm, or are switching to a different way of managing them.\n\n    n uninstall\n\n## Binary Usage\n\nWhen running multiple versions of `node`, we can target\nthem directly by asking `n` for the binary path:\n\n    $ n bin 0.9.4\n    /usr/local/n/versions/0.9.4/bin/node\n\nOr by using a specific version through `n`'s `use` sub-command:\n\n    n use 0.9.4 some.js\n\nFlags also work here:\n\n    n as 0.9.4 --debug some.js\n\n## Help\n\nOutput can also be obtained from `n --help`.\n\n    Usage: n [options/env] [COMMAND] [args]\n\n    Environments:\n     n [COMMAND] [args]            Uses default env (node)\n\n    Commands:\n\n      n                              Output versions installed\n      n latest                       Install or activate the latest node release\n      n -a x86 latest                As above but force 32 bit architecture\n      n lts                          Install or activate the latest LTS node release\n      n <version>                    Install node <version>\n      n use <version> [args ...]     Execute node <version> with [args ...]\n      n bin <version>                Output bin path for <version>\n      n rm <version ...>             Remove the given version(s)\n      n prune                        Remove all versions except the active version\n      n --latest                     Output the latest node version available\n      n --lts                        Output the latest LTS node version available\n      n ls                           Output the versions of node available\n\n    Options:\n\n      -V, --version   Output version of n\n      -h, --help      Display help information\n      -q, --quiet     Disable curl output (if available)\n      -d, --download  Download only\n      -a, --arch      Override system architecture\n\n    Aliases:\n\n      which   bin\n      use     as\n      list    ls\n      -       rm\n      stable  lts\n\n## Custom Source\n\nIf you would like to use a different node mirror which has the same layout as the default <https://nodejs.org/dist/>, you can define `NODE_MIRROR`.\nThe most common example is users in China can define:\n\n    export NODE_MIRROR=https://npm.taobao.org/mirrors/node\n\n## Custom Architecture\n\nBy default `n` picks the binaries matching your system architecture, e.g. `n` will download 64 bit binaries for a 64 bit system. You can override this by using the `-a` or `--arch` option.\n\nDownload and use latest 32 bit version of `node`:\n\n    n --arch x86 latest\n\nDownload and use 64 bit LTS version of `node` for older Mac Intel Core 2 Duo systems (x86 image is no longer available but x64 runs fine):\n\n    n --arch x64 lts\n\n## Optional Environment Variables\n\nThe `n` command downloads and installs to `/usr/local` by default, but you may override this location by defining `N_PREFIX`.\nTo change the location to say `$HOME/.n`, add lines like the following to your shell initialization file:\n\n    export N_PREFIX=$HOME/.n\n    export PATH=$N_PREFIX/bin:$PATH\n\nBy default `n` downloads archives from the mirror site which have been compressed with `gzip`. You can switch to using the `xz` compressed archives by defining `N_USE_XZ`.\n\n    export N_USE_XZ=true\n\nIn brief:\n\n- `NODE_MIRROR`: See [Custom source](#custom-source)\n- support for [NO_COLOR](http://no-color.org) and [CLICOLOR=0](https://bixense.com/clicolors) for controlling use of ANSI color codes\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/tj/n.git"
  },
  "scripts": {
    "test": "test/bin/run-all-tests"
  },
  "version": "5.0.2"
}
